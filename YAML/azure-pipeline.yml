resources:
  repositories:
  - repository: templates
    type: github
    name: JFolberth/TheYAMLPipelineOne
    endpoint: JFolberth
    ref: feature/dacpac

pool:
  vmImage: 'windows-latest'

parameters:
  - name: projectNamesConfigurations
    type: object
    default:
      - projectName: 'sqlmoveme'
        environmentName: 'dev2'
        regionAbrvs: ['eus']
        projectExtension: '.sqlproj'
        buildArguments: '/p:NetCoreBuild=true'
        sqlServerName: 'moveme'
        sqlDatabaseName: 'moveme'
        ipDetectionMethod: 'AutoDetect'
        deployType: 'DacpacTask'
        authenticationType: 'servicePrincipal'
  - name: serviceName
    type: string
    default: 'sqlmoveemecicd'
  - name: artifactsToPublish
    type: object
    default: ['security']


stages:
  - template: stages/dotnet_build_stage.yml@templates
    parameters:
      projectNamesConfigurations: ${{ parameters.projectNamesConfigurations}}
      serviceName: '${{ parameters.serviceName}}'
      artifactsToPublish: ${{ parameters.artifactsToPublish}}

  - stage: Deploy
    displayName: Deploy
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: Deploy
      steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
          SqlPackage /Action:Publish /SourceFile:$(Pipeline.Workspace)/sqlmoveme/AdventureWorks.dacpac /TargetConnectionString:"Server=tcp:sql-moveme-dev-eus.database.windows.net,1433;Initial Catalog=sqldbmoveme;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication="Active Directory Default";"

  # - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main')}}:
  #   - template: stages/dacpac_deploy_stage.yml@templates
  #     parameters:
  #       projectConfigurations: ${{ parameters.projectNamesConfigurations }}
  #       serviceName: ${{ parameters.serviceName }}